/*
* generated by Xtext
*/

package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GACLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Assignment cStmtsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStmtsStatementParserRuleCall_0 = (RuleCall)cStmtsAssignment.eContents().get(0);
		
		//Program:
		//	stmts+=Statement*;
		public ParserRule getRule() { return rule; }

		//stmts+=Statement*
		public Assignment getStmtsAssignment() { return cStmtsAssignment; }

		//Statement
		public RuleCall getStmtsStatementParserRuleCall_0() { return cStmtsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final RuleCall cTypeDeclParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement:
		//	TypeDecl;
		public ParserRule getRule() { return rule; }

		//TypeDecl
		public RuleCall getTypeDeclParserRuleCall() { return cTypeDeclParserRuleCall; }
	}

	public class PTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeIntTypeTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeStrTypeTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//PType:
		//	type=intType | type=strType;
		public ParserRule getRule() { return rule; }

		//type=intType | type=strType
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=intType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//intType
		public RuleCall getTypeIntTypeTerminalRuleCall_0_0() { return cTypeIntTypeTerminalRuleCall_0_0; }

		//type=strType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//strType
		public RuleCall getTypeStrTypeTerminalRuleCall_1_0() { return cTypeStrTypeTerminalRuleCall_1_0; }
	}

	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cTypeKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cTYPEKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final Assignment cTypenameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypenameIDTerminalRuleCall_0_1_0 = (RuleCall)cTypenameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Keyword cTypeKeyword_1_0_0_0 = (Keyword)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cTypeKeyword_1_0_0_1 = (Keyword)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cTYPEKeyword_1_0_0_2 = (Keyword)cAlternatives_1_0_0.eContents().get(2);
		private final Assignment cTypenameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypenameIDTerminalRuleCall_1_0_1_0 = (RuleCall)cTypenameAssignment_1_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cTpcodeAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cTpcodeTypeCodeParserRuleCall_1_0_3_0 = (RuleCall)cTpcodeAssignment_1_0_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//TypeDecl:
		//	("type" | "Type" | "TYPE") typename=ID | (("type" | "Type" | "TYPE")? typename=ID "="? tpcode=typeCode) ";"?;
		public ParserRule getRule() { return rule; }

		//("type" | "Type" | "TYPE") typename=ID | (("type" | "Type" | "TYPE")? typename=ID "="? tpcode=typeCode) ";"?
		public Alternatives getAlternatives() { return cAlternatives; }

		//("type" | "Type" | "TYPE") typename=ID
		public Group getGroup_0() { return cGroup_0; }

		//"type" | "Type" | "TYPE"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"type"
		public Keyword getTypeKeyword_0_0_0() { return cTypeKeyword_0_0_0; }

		//"Type"
		public Keyword getTypeKeyword_0_0_1() { return cTypeKeyword_0_0_1; }

		//"TYPE"
		public Keyword getTYPEKeyword_0_0_2() { return cTYPEKeyword_0_0_2; }

		//typename=ID
		public Assignment getTypenameAssignment_0_1() { return cTypenameAssignment_0_1; }

		//ID
		public RuleCall getTypenameIDTerminalRuleCall_0_1_0() { return cTypenameIDTerminalRuleCall_0_1_0; }

		//(("type" | "Type" | "TYPE")? typename=ID "="? tpcode=typeCode) ";"?
		public Group getGroup_1() { return cGroup_1; }

		//("type" | "Type" | "TYPE")? typename=ID "="? tpcode=typeCode
		public Group getGroup_1_0() { return cGroup_1_0; }

		//("type" | "Type" | "TYPE")?
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }

		//"type"
		public Keyword getTypeKeyword_1_0_0_0() { return cTypeKeyword_1_0_0_0; }

		//"Type"
		public Keyword getTypeKeyword_1_0_0_1() { return cTypeKeyword_1_0_0_1; }

		//"TYPE"
		public Keyword getTYPEKeyword_1_0_0_2() { return cTYPEKeyword_1_0_0_2; }

		//typename=ID
		public Assignment getTypenameAssignment_1_0_1() { return cTypenameAssignment_1_0_1; }

		//ID
		public RuleCall getTypenameIDTerminalRuleCall_1_0_1_0() { return cTypenameIDTerminalRuleCall_1_0_1_0; }

		//"="?
		public Keyword getEqualsSignKeyword_1_0_2() { return cEqualsSignKeyword_1_0_2; }

		//tpcode=typeCode
		public Assignment getTpcodeAssignment_1_0_3() { return cTpcodeAssignment_1_0_3; }

		//typeCode
		public RuleCall getTpcodeTypeCodeParserRuleCall_1_0_3_0() { return cTpcodeTypeCodeParserRuleCall_1_0_3_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class TypeCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "typeCode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrmAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPrmPTypeParserRuleCall_0_0 = (RuleCall)cPrmAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cElementsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_1_1_0_0 = (RuleCall)cElementsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_1_1_1_1_0 = (RuleCall)cElementsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//typeCode:
		//	prm=PType | "{" (elements+=element ("," elements+=element)?) "}";
		public ParserRule getRule() { return rule; }

		//prm=PType | "{" (elements+=element ("," elements+=element)?) "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//prm=PType
		public Assignment getPrmAssignment_0() { return cPrmAssignment_0; }

		//PType
		public RuleCall getPrmPTypeParserRuleCall_0_0() { return cPrmPTypeParserRuleCall_0_0; }

		//"{" (elements+=element ("," elements+=element)?) "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//elements+=element ("," elements+=element)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//elements+=element
		public Assignment getElementsAssignment_1_1_0() { return cElementsAssignment_1_1_0; }

		//element
		public RuleCall getElementsElementParserRuleCall_1_1_0_0() { return cElementsElementParserRuleCall_1_1_0_0; }

		//("," elements+=element)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//elements+=element
		public Assignment getElementsAssignment_1_1_1_1() { return cElementsAssignment_1_1_1_1; }

		//element
		public RuleCall getElementsElementParserRuleCall_1_1_1_1_0() { return cElementsElementParserRuleCall_1_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cElemnameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cElemnameIDTerminalRuleCall_0_0_0 = (RuleCall)cElemnameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypenameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypenameIDTerminalRuleCall_0_2_0 = (RuleCall)cTypenameAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cElemnameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElemnameIDTerminalRuleCall_1_0_0 = (RuleCall)cElemnameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPrmtypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPrmtypePTypeParserRuleCall_1_2_0 = (RuleCall)cPrmtypeAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cElemnameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElemnameIDTerminalRuleCall_2_0_0 = (RuleCall)cElemnameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cColonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTypenameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTypenameIDTerminalRuleCall_2_1_1_0 = (RuleCall)cTypenameAssignment_2_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cArgsAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cArgsIDTerminalRuleCall_2_3_0_0 = (RuleCall)cArgsAssignment_2_3_0.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Keyword cCommaKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_3_1_1 = (Assignment)cGroup_2_3_1.eContents().get(1);
		private final RuleCall cArgsIDTerminalRuleCall_2_3_1_1_0 = (RuleCall)cArgsAssignment_2_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//element:
		//	elemname=ID ":" typename=ID | elemname=ID ":" prmtype=PType | elemname=ID (":" typename=ID)? "(" (args+=ID (","
		//	args+=ID)?)? ")";
		public ParserRule getRule() { return rule; }

		//elemname=ID ":" typename=ID | elemname=ID ":" prmtype=PType | elemname=ID (":" typename=ID)? "(" (args+=ID (","
		//args+=ID)?)? ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//elemname=ID ":" typename=ID
		public Group getGroup_0() { return cGroup_0; }

		//elemname=ID
		public Assignment getElemnameAssignment_0_0() { return cElemnameAssignment_0_0; }

		//ID
		public RuleCall getElemnameIDTerminalRuleCall_0_0_0() { return cElemnameIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//typename=ID
		public Assignment getTypenameAssignment_0_2() { return cTypenameAssignment_0_2; }

		//ID
		public RuleCall getTypenameIDTerminalRuleCall_0_2_0() { return cTypenameIDTerminalRuleCall_0_2_0; }

		//elemname=ID ":" prmtype=PType
		public Group getGroup_1() { return cGroup_1; }

		//elemname=ID
		public Assignment getElemnameAssignment_1_0() { return cElemnameAssignment_1_0; }

		//ID
		public RuleCall getElemnameIDTerminalRuleCall_1_0_0() { return cElemnameIDTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//prmtype=PType
		public Assignment getPrmtypeAssignment_1_2() { return cPrmtypeAssignment_1_2; }

		//PType
		public RuleCall getPrmtypePTypeParserRuleCall_1_2_0() { return cPrmtypePTypeParserRuleCall_1_2_0; }

		//elemname=ID (":" typename=ID)? "(" (args+=ID ("," args+=ID)?)? ")"
		public Group getGroup_2() { return cGroup_2; }

		//elemname=ID
		public Assignment getElemnameAssignment_2_0() { return cElemnameAssignment_2_0; }

		//ID
		public RuleCall getElemnameIDTerminalRuleCall_2_0_0() { return cElemnameIDTerminalRuleCall_2_0_0; }

		//(":" typename=ID)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//":"
		public Keyword getColonKeyword_2_1_0() { return cColonKeyword_2_1_0; }

		//typename=ID
		public Assignment getTypenameAssignment_2_1_1() { return cTypenameAssignment_2_1_1; }

		//ID
		public RuleCall getTypenameIDTerminalRuleCall_2_1_1_0() { return cTypenameIDTerminalRuleCall_2_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//(args+=ID ("," args+=ID)?)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//args+=ID
		public Assignment getArgsAssignment_2_3_0() { return cArgsAssignment_2_3_0; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_2_3_0_0() { return cArgsIDTerminalRuleCall_2_3_0_0; }

		//("," args+=ID)?
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//","
		public Keyword getCommaKeyword_2_3_1_0() { return cCommaKeyword_2_3_1_0; }

		//args+=ID
		public Assignment getArgsAssignment_2_3_1_1() { return cArgsAssignment_2_3_1_1; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_2_3_1_1_0() { return cArgsIDTerminalRuleCall_2_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}
	
	
	private ProgramElements pProgram;
	private StatementElements pStatement;
	private PTypeElements pPType;
	private TerminalRule tIntType;
	private TerminalRule tStrType;
	private TypeDeclElements pTypeDecl;
	private TypeCodeElements pTypeCode;
	private ElementElements pElement;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public GACLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	stmts+=Statement*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Statement:
	//	TypeDecl;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//PType:
	//	type=intType | type=strType;
	public PTypeElements getPTypeAccess() {
		return (pPType != null) ? pPType : (pPType = new PTypeElements());
	}
	
	public ParserRule getPTypeRule() {
		return getPTypeAccess().getRule();
	}

	//terminal intType:
	//	"int";
	public TerminalRule getIntTypeRule() {
		return (tIntType != null) ? tIntType : (tIntType = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "intType"));
	} 

	//terminal strType:
	//	"string";
	public TerminalRule getStrTypeRule() {
		return (tStrType != null) ? tStrType : (tStrType = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "strType"));
	} 

	//TypeDecl:
	//	("type" | "Type" | "TYPE") typename=ID | (("type" | "Type" | "TYPE")? typename=ID "="? tpcode=typeCode) ";"?;
	public TypeDeclElements getTypeDeclAccess() {
		return (pTypeDecl != null) ? pTypeDecl : (pTypeDecl = new TypeDeclElements());
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}

	//typeCode:
	//	prm=PType | "{" (elements+=element ("," elements+=element)?) "}";
	public TypeCodeElements getTypeCodeAccess() {
		return (pTypeCode != null) ? pTypeCode : (pTypeCode = new TypeCodeElements());
	}
	
	public ParserRule getTypeCodeRule() {
		return getTypeCodeAccess().getRule();
	}

	//element:
	//	elemname=ID ":" typename=ID | elemname=ID ":" prmtype=PType | elemname=ID (":" typename=ID)? "(" (args+=ID (","
	//	args+=ID)?)? ")";
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
