grammar org.xtext.example.mydsl.GACL with org.eclipse.xtext.common.Terminals

generate gACL "http://www.xtext.org/example/mydsl/GACL"

GCode:
	( '{' gcode=GStatementList '}' )
;

GStatementList:
stmts += (GStatement)*
;

GStatement:
(td=GTypeDecl | vd=GVarDecl | vin = GVarInst | ifst = GIfThenElse | fl = GForLoop)
;

GVarDecl:
'var' name=ID (':' (pt=gPType | td=[GTypeDecl]))? {GVarDecl.type=current} ';'
;

gPType:
type=GIntType | type=GStrType
;

terminal GIntType:
'gInt'
;

terminal GStrType:
'gString'
;

GTypeDecl:
'type' name=ID '=' tp=gPType ';'
;

GVarInst:
varName=[GVarDecl] '=' ( exp = GExpression ) ';'
;

GExpression returns GExpression:
GConcat
;

GConcat returns GExpression:
GSubtraction ({GConcat.left=current} '^' right=GStringLiteral)*
;

GSubtraction returns GExpression:
GAddition ({GSubtraction.left=current} '-' right=GAddition)*
;

GAddition returns GExpression:
GMultiplication ({GAddition.left=current} '+' right=GMultiplication)*
;

GMultiplication returns GExpression:
GDivision ({GMultiplication.left=current} '*' right=GDivision)*
;

GDivision returns GExpression:
GPowerOf ({GDivision.left=current} '/' right=GPowerOf)*
;

GPowerOf returns GExpression:
GBasicExp ({GPowerOf.left=current} '**' right=GBasicExp)*
;

GBasicExp returns GExpression:
GStringLiteral | GIntLiteral | GVarExps | '(' GConcat ')'
;

GIntLiteral:
value=INT
;

GStringLiteral:
value=STRING
;

GVarExps:
vrnm=[GVarDecl]
;

GForLoop:
('for' cond=GExpression ( stmts += GStatement | ('{' stmts += GStatementList '}')))
;

GIfThenElse:
('if' cond=GExpression ( stmts += GStatement | ('{' stmts += GStatementList '}')) (=>'else' ( estmts += GStatement | ('{' estmts += GStatementList '}')))? )
;

// End of HCKKID's code