/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.GACLGrammarAccess;

public class GACLParser extends AbstractContentAssistParser {
	
	@Inject
	private GACLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalGACLParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalGACLParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalGACLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getVarDeclAccess().getAlternatives_3(), "rule__VarDecl__Alternatives_3");
					put(grammarAccess.getPTypeAccess().getAlternatives(), "rule__PType__Alternatives");
					put(grammarAccess.getVarInstAccess().getAlternatives_2(), "rule__VarInst__Alternatives_2");
					put(grammarAccess.getBasicIntExpAccess().getAlternatives(), "rule__BasicIntExp__Alternatives");
					put(grammarAccess.getVarDeclAccess().getGroup(), "rule__VarDecl__Group__0");
					put(grammarAccess.getTypeDeclAccess().getGroup(), "rule__TypeDecl__Group__0");
					put(grammarAccess.getVarInstAccess().getGroup(), "rule__VarInst__Group__0");
					put(grammarAccess.getConcatAccess().getGroup(), "rule__Concat__Group__0");
					put(grammarAccess.getConcatAccess().getGroup_1(), "rule__Concat__Group_1__0");
					put(grammarAccess.getSubtractionAccess().getGroup(), "rule__Subtraction__Group__0");
					put(grammarAccess.getSubtractionAccess().getGroup_1(), "rule__Subtraction__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getDivisionAccess().getGroup(), "rule__Division__Group__0");
					put(grammarAccess.getDivisionAccess().getGroup_1(), "rule__Division__Group_1__0");
					put(grammarAccess.getPowerOfAccess().getGroup(), "rule__PowerOf__Group__0");
					put(grammarAccess.getPowerOfAccess().getGroup_1(), "rule__PowerOf__Group_1__0");
					put(grammarAccess.getBasicIntExpAccess().getGroup_1(), "rule__BasicIntExp__Group_1__0");
					put(grammarAccess.getDetailCodeAccess().getStmtsAssignment(), "rule__DetailCode__StmtsAssignment");
					put(grammarAccess.getStatementAccess().getTdAssignment_0(), "rule__Statement__TdAssignment_0");
					put(grammarAccess.getStatementAccess().getVdAssignment_1(), "rule__Statement__VdAssignment_1");
					put(grammarAccess.getStatementAccess().getVinAssignment_2(), "rule__Statement__VinAssignment_2");
					put(grammarAccess.getVarDeclAccess().getNameAssignment_1(), "rule__VarDecl__NameAssignment_1");
					put(grammarAccess.getVarDeclAccess().getPtAssignment_3_0(), "rule__VarDecl__PtAssignment_3_0");
					put(grammarAccess.getVarDeclAccess().getTdAssignment_3_1(), "rule__VarDecl__TdAssignment_3_1");
					put(grammarAccess.getPTypeAccess().getTypeAssignment_0(), "rule__PType__TypeAssignment_0");
					put(grammarAccess.getPTypeAccess().getTypeAssignment_1(), "rule__PType__TypeAssignment_1");
					put(grammarAccess.getTypeDeclAccess().getNameAssignment_1(), "rule__TypeDecl__NameAssignment_1");
					put(grammarAccess.getTypeDeclAccess().getTpAssignment_3(), "rule__TypeDecl__TpAssignment_3");
					put(grammarAccess.getVarInstAccess().getNameAssignment_0(), "rule__VarInst__NameAssignment_0");
					put(grammarAccess.getVarInstAccess().getStrexpAssignment_2_0(), "rule__VarInst__StrexpAssignment_2_0");
					put(grammarAccess.getVarInstAccess().getInexpAssignment_2_1(), "rule__VarInst__InexpAssignment_2_1");
					put(grammarAccess.getConcatAccess().getRightAssignment_1_2(), "rule__Concat__RightAssignment_1_2");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getSubtractionAccess().getRightAssignment_1_2(), "rule__Subtraction__RightAssignment_1_2");
					put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
					put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
					put(grammarAccess.getDivisionAccess().getRightAssignment_1_2(), "rule__Division__RightAssignment_1_2");
					put(grammarAccess.getPowerOfAccess().getRightAssignment_1_2(), "rule__PowerOf__RightAssignment_1_2");
					put(grammarAccess.getIntLiteralAccess().getValueAssignment(), "rule__IntLiteral__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalGACLParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalGACLParser) parser;
			typedParser.entryRuleDetailCode();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public GACLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(GACLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
