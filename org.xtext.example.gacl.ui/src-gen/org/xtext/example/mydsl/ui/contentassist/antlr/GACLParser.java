/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.GACLGrammarAccess;

public class GACLParser extends AbstractContentAssistParser {
	
	@Inject
	private GACLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalGACLParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalGACLParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalGACLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPTypeAccess().getAlternatives(), "rule__PType__Alternatives");
					put(grammarAccess.getTypeDeclAccess().getAlternatives(), "rule__TypeDecl__Alternatives");
					put(grammarAccess.getTypeDeclAccess().getAlternatives_0_0(), "rule__TypeDecl__Alternatives_0_0");
					put(grammarAccess.getTypeDeclAccess().getAlternatives_1_0_0(), "rule__TypeDecl__Alternatives_1_0_0");
					put(grammarAccess.getTypeCodeAccess().getAlternatives(), "rule__TypeCode__Alternatives");
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getTypeDeclAccess().getGroup_0(), "rule__TypeDecl__Group_0__0");
					put(grammarAccess.getTypeDeclAccess().getGroup_1(), "rule__TypeDecl__Group_1__0");
					put(grammarAccess.getTypeDeclAccess().getGroup_1_0(), "rule__TypeDecl__Group_1_0__0");
					put(grammarAccess.getTypeCodeAccess().getGroup_1(), "rule__TypeCode__Group_1__0");
					put(grammarAccess.getTypeCodeAccess().getGroup_1_1(), "rule__TypeCode__Group_1_1__0");
					put(grammarAccess.getTypeCodeAccess().getGroup_1_1_1(), "rule__TypeCode__Group_1_1_1__0");
					put(grammarAccess.getElementAccess().getGroup_0(), "rule__Element__Group_0__0");
					put(grammarAccess.getElementAccess().getGroup_1(), "rule__Element__Group_1__0");
					put(grammarAccess.getElementAccess().getGroup_2(), "rule__Element__Group_2__0");
					put(grammarAccess.getElementAccess().getGroup_2_1(), "rule__Element__Group_2_1__0");
					put(grammarAccess.getElementAccess().getGroup_2_3(), "rule__Element__Group_2_3__0");
					put(grammarAccess.getElementAccess().getGroup_2_3_1(), "rule__Element__Group_2_3_1__0");
					put(grammarAccess.getProgramAccess().getStmtsAssignment(), "rule__Program__StmtsAssignment");
					put(grammarAccess.getPTypeAccess().getTypeAssignment_0(), "rule__PType__TypeAssignment_0");
					put(grammarAccess.getPTypeAccess().getTypeAssignment_1(), "rule__PType__TypeAssignment_1");
					put(grammarAccess.getTypeDeclAccess().getTypenameAssignment_0_1(), "rule__TypeDecl__TypenameAssignment_0_1");
					put(grammarAccess.getTypeDeclAccess().getTypenameAssignment_1_0_1(), "rule__TypeDecl__TypenameAssignment_1_0_1");
					put(grammarAccess.getTypeDeclAccess().getTpcodeAssignment_1_0_3(), "rule__TypeDecl__TpcodeAssignment_1_0_3");
					put(grammarAccess.getTypeCodeAccess().getPrmAssignment_0(), "rule__TypeCode__PrmAssignment_0");
					put(grammarAccess.getTypeCodeAccess().getElementsAssignment_1_1_0(), "rule__TypeCode__ElementsAssignment_1_1_0");
					put(grammarAccess.getTypeCodeAccess().getElementsAssignment_1_1_1_1(), "rule__TypeCode__ElementsAssignment_1_1_1_1");
					put(grammarAccess.getElementAccess().getElemnameAssignment_0_0(), "rule__Element__ElemnameAssignment_0_0");
					put(grammarAccess.getElementAccess().getTypenameAssignment_0_2(), "rule__Element__TypenameAssignment_0_2");
					put(grammarAccess.getElementAccess().getElemnameAssignment_1_0(), "rule__Element__ElemnameAssignment_1_0");
					put(grammarAccess.getElementAccess().getPrmtypeAssignment_1_2(), "rule__Element__PrmtypeAssignment_1_2");
					put(grammarAccess.getElementAccess().getElemnameAssignment_2_0(), "rule__Element__ElemnameAssignment_2_0");
					put(grammarAccess.getElementAccess().getTypenameAssignment_2_1_1(), "rule__Element__TypenameAssignment_2_1_1");
					put(grammarAccess.getElementAccess().getArgsAssignment_2_3_0(), "rule__Element__ArgsAssignment_2_3_0");
					put(grammarAccess.getElementAccess().getArgsAssignment_2_3_1_1(), "rule__Element__ArgsAssignment_2_3_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalGACLParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalGACLParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public GACLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(GACLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
