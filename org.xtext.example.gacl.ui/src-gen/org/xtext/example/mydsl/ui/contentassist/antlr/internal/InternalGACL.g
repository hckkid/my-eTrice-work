/*
* generated by Xtext
*/
grammar InternalGACL;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.GACLGrammarAccess;

}

@parser::members {
 
 	private GACLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(GACLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCode
entryRuleCode 
:
{ before(grammarAccess.getCodeRule()); }
	 ruleCode
{ after(grammarAccess.getCodeRule()); } 
	 EOF 
;

// Rule Code
ruleCode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCodeAccess().getGroup()); }
(rule__Code__Group__0)
{ after(grammarAccess.getCodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleStatement
entryRuleSingleStatement 
:
{ before(grammarAccess.getSingleStatementRule()); }
	 ruleSingleStatement
{ after(grammarAccess.getSingleStatementRule()); } 
	 EOF 
;

// Rule SingleStatement
ruleSingleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleStatementAccess().getAlternatives()); }
(rule__SingleStatement__Alternatives)
{ after(grammarAccess.getSingleStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarDecl
entryRuleVarDecl 
:
{ before(grammarAccess.getVarDeclRule()); }
	 ruleVarDecl
{ after(grammarAccess.getVarDeclRule()); } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarDeclAccess().getGroup()); }
(rule__VarDecl__Group__0)
{ after(grammarAccess.getVarDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePType
entryRulePType 
:
{ before(grammarAccess.getPTypeRule()); }
	 rulePType
{ after(grammarAccess.getPTypeRule()); } 
	 EOF 
;

// Rule PType
rulePType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPTypeAccess().getAlternatives()); }
(rule__PType__Alternatives)
{ after(grammarAccess.getPTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDecl
entryRuleTypeDecl 
:
{ before(grammarAccess.getTypeDeclRule()); }
	 ruleTypeDecl
{ after(grammarAccess.getTypeDeclRule()); } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDeclAccess().getGroup()); }
(rule__TypeDecl__Group__0)
{ after(grammarAccess.getTypeDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarInst
entryRuleVarInst 
:
{ before(grammarAccess.getVarInstRule()); }
	 ruleVarInst
{ after(grammarAccess.getVarInstRule()); } 
	 EOF 
;

// Rule VarInst
ruleVarInst
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarInstAccess().getGroup()); }
(rule__VarInst__Group__0)
{ after(grammarAccess.getVarInstAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getConcatParserRuleCall()); }
	ruleConcat
{ after(grammarAccess.getExpressionAccess().getConcatParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcat
entryRuleConcat 
:
{ before(grammarAccess.getConcatRule()); }
	 ruleConcat
{ after(grammarAccess.getConcatRule()); } 
	 EOF 
;

// Rule Concat
ruleConcat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcatAccess().getGroup()); }
(rule__Concat__Group__0)
{ after(grammarAccess.getConcatAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubtraction
entryRuleSubtraction 
:
{ before(grammarAccess.getSubtractionRule()); }
	 ruleSubtraction
{ after(grammarAccess.getSubtractionRule()); } 
	 EOF 
;

// Rule Subtraction
ruleSubtraction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubtractionAccess().getGroup()); }
(rule__Subtraction__Group__0)
{ after(grammarAccess.getSubtractionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDivision
entryRuleDivision 
:
{ before(grammarAccess.getDivisionRule()); }
	 ruleDivision
{ after(grammarAccess.getDivisionRule()); } 
	 EOF 
;

// Rule Division
ruleDivision
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivisionAccess().getGroup()); }
(rule__Division__Group__0)
{ after(grammarAccess.getDivisionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePowerOf
entryRulePowerOf 
:
{ before(grammarAccess.getPowerOfRule()); }
	 rulePowerOf
{ after(grammarAccess.getPowerOfRule()); } 
	 EOF 
;

// Rule PowerOf
rulePowerOf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPowerOfAccess().getGroup()); }
(rule__PowerOf__Group__0)
{ after(grammarAccess.getPowerOfAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicExp
entryRuleBasicExp 
:
{ before(grammarAccess.getBasicExpRule()); }
	 ruleBasicExp
{ after(grammarAccess.getBasicExpRule()); } 
	 EOF 
;

// Rule BasicExp
ruleBasicExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicExpAccess().getAlternatives()); }
(rule__BasicExp__Alternatives)
{ after(grammarAccess.getBasicExpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntLiteral
entryRuleIntLiteral 
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntLiteralAccess().getValueAssignment()); }
(rule__IntLiteral__ValueAssignment)
{ after(grammarAccess.getIntLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarExps
entryRuleVarExps 
:
{ before(grammarAccess.getVarExpsRule()); }
	 ruleVarExps
{ after(grammarAccess.getVarExpsRule()); } 
	 EOF 
;

// Rule VarExps
ruleVarExps
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarExpsAccess().getVrnmAssignment()); }
(rule__VarExps__VrnmAssignment)
{ after(grammarAccess.getVarExpsAccess().getVrnmAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleforlp
entryRuleforlp 
:
{ before(grammarAccess.getForlpRule()); }
	 ruleforlp
{ after(grammarAccess.getForlpRule()); } 
	 EOF 
;

// Rule forlp
ruleforlp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForlpAccess().getGroup()); }
(rule__Forlp__Group__0)
{ after(grammarAccess.getForlpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleifte
entryRuleifte 
:
{ before(grammarAccess.getIfteRule()); }
	 ruleifte
{ after(grammarAccess.getIfteRule()); } 
	 EOF 
;

// Rule ifte
ruleifte
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfteAccess().getGroup()); }
(rule__Ifte__Group__0)
{ after(grammarAccess.getIfteAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Code__DeclsAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getDeclsTypeDeclParserRuleCall_0_0_0()); }
	ruleTypeDecl
{ after(grammarAccess.getCodeAccess().getDeclsTypeDeclParserRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getCodeAccess().getDeclsVarDeclParserRuleCall_0_0_1()); }
	ruleVarDecl
{ after(grammarAccess.getCodeAccess().getDeclsVarDeclParserRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStatementAccess().getTdAssignment_0()); }
(rule__SingleStatement__TdAssignment_0)
{ after(grammarAccess.getSingleStatementAccess().getTdAssignment_0()); }
)

    |(
{ before(grammarAccess.getSingleStatementAccess().getVdAssignment_1()); }
(rule__SingleStatement__VdAssignment_1)
{ after(grammarAccess.getSingleStatementAccess().getVdAssignment_1()); }
)

    |(
{ before(grammarAccess.getSingleStatementAccess().getVinAssignment_2()); }
(rule__SingleStatement__VinAssignment_2)
{ after(grammarAccess.getSingleStatementAccess().getVinAssignment_2()); }
)

    |(
{ before(grammarAccess.getSingleStatementAccess().getIfstAssignment_3()); }
(rule__SingleStatement__IfstAssignment_3)
{ after(grammarAccess.getSingleStatementAccess().getIfstAssignment_3()); }
)

    |(
{ before(grammarAccess.getSingleStatementAccess().getFlAssignment_4()); }
(rule__SingleStatement__FlAssignment_4)
{ after(grammarAccess.getSingleStatementAccess().getFlAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getVinAssignment_0()); }
(rule__Statement__VinAssignment_0)
{ after(grammarAccess.getStatementAccess().getVinAssignment_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getIfstAssignment_1()); }
(rule__Statement__IfstAssignment_1)
{ after(grammarAccess.getStatementAccess().getIfstAssignment_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getFlAssignment_2()); }
(rule__Statement__FlAssignment_2)
{ after(grammarAccess.getStatementAccess().getFlAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getPtAssignment_2_1_0()); }
(rule__VarDecl__PtAssignment_2_1_0)
{ after(grammarAccess.getVarDeclAccess().getPtAssignment_2_1_0()); }
)

    |(
{ before(grammarAccess.getVarDeclAccess().getTdAssignment_2_1_1()); }
(rule__VarDecl__TdAssignment_2_1_1)
{ after(grammarAccess.getVarDeclAccess().getTdAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPTypeAccess().getTypeAssignment_0()); }
(rule__PType__TypeAssignment_0)
{ after(grammarAccess.getPTypeAccess().getTypeAssignment_0()); }
)

    |(
{ before(grammarAccess.getPTypeAccess().getTypeAssignment_1()); }
(rule__PType__TypeAssignment_1)
{ after(grammarAccess.getPTypeAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicExp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicExpAccess().getStringLiteralParserRuleCall_0()); }
	ruleStringLiteral
{ after(grammarAccess.getBasicExpAccess().getStringLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBasicExpAccess().getIntLiteralParserRuleCall_1()); }
	ruleIntLiteral
{ after(grammarAccess.getBasicExpAccess().getIntLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBasicExpAccess().getVarExpsParserRuleCall_2()); }
	ruleVarExps
{ after(grammarAccess.getBasicExpAccess().getVarExpsParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBasicExpAccess().getGroup_3()); }
(rule__BasicExp__Group_3__0)
{ after(grammarAccess.getBasicExpAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Forlp__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForlpAccess().getStmtsAssignment_2_0()); }
(rule__Forlp__StmtsAssignment_2_0)
{ after(grammarAccess.getForlpAccess().getStmtsAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getForlpAccess().getGroup_2_1()); }
(rule__Forlp__Group_2_1__0)
{ after(grammarAccess.getForlpAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getStmtsAssignment_2_0()); }
(rule__Ifte__StmtsAssignment_2_0)
{ after(grammarAccess.getIfteAccess().getStmtsAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getIfteAccess().getGroup_2_1()); }
(rule__Ifte__Group_2_1__0)
{ after(grammarAccess.getIfteAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Alternatives_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getEstmtsAssignment_3_1_0()); }
(rule__Ifte__EstmtsAssignment_3_1_0)
{ after(grammarAccess.getIfteAccess().getEstmtsAssignment_3_1_0()); }
)

    |(
{ before(grammarAccess.getIfteAccess().getGroup_3_1_1()); }
(rule__Ifte__Group_3_1_1__0)
{ after(grammarAccess.getIfteAccess().getGroup_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Code__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Code__Group__0__Impl
	rule__Code__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getDeclsAssignment_0()); }
(rule__Code__DeclsAssignment_0)*
{ after(grammarAccess.getCodeAccess().getDeclsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Code__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Code__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Code__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getStmtsAssignment_1()); }
(rule__Code__StmtsAssignment_1)*
{ after(grammarAccess.getCodeAccess().getStmtsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VarDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__0__Impl
	rule__VarDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getVarDeclAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__1__Impl
	rule__VarDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getNameAssignment_1()); }
(rule__VarDecl__NameAssignment_1)
{ after(grammarAccess.getVarDeclAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__2__Impl
	rule__VarDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getGroup_2()); }
(rule__VarDecl__Group_2__0)?
{ after(grammarAccess.getVarDeclAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__3__Impl
	rule__VarDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getVarDeclTypeAction_3()); }
(

)
{ after(grammarAccess.getVarDeclAccess().getVarDeclTypeAction_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getVarDeclAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VarDecl__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group_2__0__Impl
	rule__VarDecl__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getColonKeyword_2_0()); }

	':' 

{ after(grammarAccess.getVarDeclAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getAlternatives_2_1()); }
(rule__VarDecl__Alternatives_2_1)
{ after(grammarAccess.getVarDeclAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__0__Impl
	rule__TypeDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getTypeDeclAccess().getTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__1__Impl
	rule__TypeDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getNameAssignment_1()); }
(rule__TypeDecl__NameAssignment_1)
{ after(grammarAccess.getTypeDeclAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__2__Impl
	rule__TypeDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getTypeDeclAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__3__Impl
	rule__TypeDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTpAssignment_3()); }
(rule__TypeDecl__TpAssignment_3)
{ after(grammarAccess.getTypeDeclAccess().getTpAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getTypeDeclAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VarInst__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarInst__Group__0__Impl
	rule__VarInst__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInst__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarInstAccess().getNameAssignment_0()); }
(rule__VarInst__NameAssignment_0)
{ after(grammarAccess.getVarInstAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarInst__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarInst__Group__1__Impl
	rule__VarInst__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInst__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarInstAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getVarInstAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarInst__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarInst__Group__2__Impl
	rule__VarInst__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInst__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarInstAccess().getExpAssignment_2()); }
(rule__VarInst__ExpAssignment_2)
{ after(grammarAccess.getVarInstAccess().getExpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarInst__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarInst__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInst__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarInstAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getVarInstAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Concat__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Concat__Group__0__Impl
	rule__Concat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatAccess().getSubtractionParserRuleCall_0()); }
	ruleSubtraction
{ after(grammarAccess.getConcatAccess().getSubtractionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Concat__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Concat__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatAccess().getGroup_1()); }
(rule__Concat__Group_1__0)*
{ after(grammarAccess.getConcatAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Concat__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Concat__Group_1__0__Impl
	rule__Concat__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatAccess().getConcatLeftAction_1_0()); }
(

)
{ after(grammarAccess.getConcatAccess().getConcatLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Concat__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Concat__Group_1__1__Impl
	rule__Concat__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatAccess().getCircumflexAccentKeyword_1_1()); }

	'^' 

{ after(grammarAccess.getConcatAccess().getCircumflexAccentKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Concat__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Concat__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatAccess().getRightAssignment_1_2()); }
(rule__Concat__RightAssignment_1_2)
{ after(grammarAccess.getConcatAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Subtraction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subtraction__Group__0__Impl
	rule__Subtraction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractionAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
{ after(grammarAccess.getSubtractionAccess().getAdditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subtraction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subtraction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractionAccess().getGroup_1()); }
(rule__Subtraction__Group_1__0)*
{ after(grammarAccess.getSubtractionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Subtraction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subtraction__Group_1__0__Impl
	rule__Subtraction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractionAccess().getSubtractionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSubtractionAccess().getSubtractionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subtraction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subtraction__Group_1__1__Impl
	rule__Subtraction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractionAccess().getHyphenMinusKeyword_1_1()); }

	'-' 

{ after(grammarAccess.getSubtractionAccess().getHyphenMinusKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subtraction__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subtraction__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractionAccess().getRightAssignment_1_2()); }
(rule__Subtraction__RightAssignment_1_2)
{ after(grammarAccess.getSubtractionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
(rule__Addition__RightAssignment_1_2)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0()); }
	ruleDivision
{ after(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
(rule__Multiplication__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Division__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group__0__Impl
	rule__Division__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getPowerOfParserRuleCall_0()); }
	rulePowerOf
{ after(grammarAccess.getDivisionAccess().getPowerOfParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getGroup_1()); }
(rule__Division__Group_1__0)*
{ after(grammarAccess.getDivisionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Division__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group_1__0__Impl
	rule__Division__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getDivisionAccess().getDivisionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group_1__1__Impl
	rule__Division__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getSolidusKeyword_1_1()); }

	'/' 

{ after(grammarAccess.getDivisionAccess().getSolidusKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Division__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Division__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Division__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getRightAssignment_1_2()); }
(rule__Division__RightAssignment_1_2)
{ after(grammarAccess.getDivisionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PowerOf__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerOf__Group__0__Impl
	rule__PowerOf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOf__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerOfAccess().getBasicExpParserRuleCall_0()); }
	ruleBasicExp
{ after(grammarAccess.getPowerOfAccess().getBasicExpParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowerOf__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerOf__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOf__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerOfAccess().getGroup_1()); }
(rule__PowerOf__Group_1__0)*
{ after(grammarAccess.getPowerOfAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PowerOf__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerOf__Group_1__0__Impl
	rule__PowerOf__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOf__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerOfAccess().getPowerOfLeftAction_1_0()); }
(

)
{ after(grammarAccess.getPowerOfAccess().getPowerOfLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowerOf__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerOf__Group_1__1__Impl
	rule__PowerOf__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOf__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerOfAccess().getAsteriskAsteriskKeyword_1_1()); }

	'**' 

{ after(grammarAccess.getPowerOfAccess().getAsteriskAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PowerOf__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PowerOf__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOf__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerOfAccess().getRightAssignment_1_2()); }
(rule__PowerOf__RightAssignment_1_2)
{ after(grammarAccess.getPowerOfAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BasicExp__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicExp__Group_3__0__Impl
	rule__BasicExp__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicExp__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicExpAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getBasicExpAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicExp__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicExp__Group_3__1__Impl
	rule__BasicExp__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicExp__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicExpAccess().getConcatParserRuleCall_3_1()); }
	ruleConcat
{ after(grammarAccess.getBasicExpAccess().getConcatParserRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicExp__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicExp__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicExp__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicExpAccess().getRightParenthesisKeyword_3_2()); }

	')' 

{ after(grammarAccess.getBasicExpAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Forlp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forlp__Group__0__Impl
	rule__Forlp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forlp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForlpAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getForlpAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forlp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forlp__Group__1__Impl
	rule__Forlp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Forlp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForlpAccess().getCondAssignment_1()); }
(rule__Forlp__CondAssignment_1)
{ after(grammarAccess.getForlpAccess().getCondAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forlp__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forlp__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forlp__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForlpAccess().getAlternatives_2()); }
(rule__Forlp__Alternatives_2)
{ after(grammarAccess.getForlpAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Forlp__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forlp__Group_2_1__0__Impl
	rule__Forlp__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Forlp__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForlpAccess().getLeftCurlyBracketKeyword_2_1_0()); }

	'{' 

{ after(grammarAccess.getForlpAccess().getLeftCurlyBracketKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forlp__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forlp__Group_2_1__1__Impl
	rule__Forlp__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Forlp__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForlpAccess().getStmtsAssignment_2_1_1()); }
(rule__Forlp__StmtsAssignment_2_1_1)
{ after(grammarAccess.getForlpAccess().getStmtsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Forlp__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Forlp__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Forlp__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForlpAccess().getRightCurlyBracketKeyword_2_1_2()); }

	'}' 

{ after(grammarAccess.getForlpAccess().getRightCurlyBracketKeyword_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Ifte__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifte__Group__0__Impl
	rule__Ifte__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfteAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifte__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifte__Group__1__Impl
	rule__Ifte__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getCondAssignment_1()); }
(rule__Ifte__CondAssignment_1)
{ after(grammarAccess.getIfteAccess().getCondAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifte__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifte__Group__2__Impl
	rule__Ifte__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getAlternatives_2()); }
(rule__Ifte__Alternatives_2)
{ after(grammarAccess.getIfteAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifte__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifte__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getGroup_3()); }
(rule__Ifte__Group_3__0)?
{ after(grammarAccess.getIfteAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Ifte__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifte__Group_2_1__0__Impl
	rule__Ifte__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getLeftCurlyBracketKeyword_2_1_0()); }

	'{' 

{ after(grammarAccess.getIfteAccess().getLeftCurlyBracketKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifte__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifte__Group_2_1__1__Impl
	rule__Ifte__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getStmtsAssignment_2_1_1()); }
(rule__Ifte__StmtsAssignment_2_1_1)
{ after(grammarAccess.getIfteAccess().getStmtsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifte__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifte__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getRightCurlyBracketKeyword_2_1_2()); }

	'}' 

{ after(grammarAccess.getIfteAccess().getRightCurlyBracketKeyword_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Ifte__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifte__Group_3__0__Impl
	rule__Ifte__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getElseKeyword_3_0()); }
(
	'else' 
)
{ after(grammarAccess.getIfteAccess().getElseKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifte__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifte__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getAlternatives_3_1()); }
(rule__Ifte__Alternatives_3_1)
{ after(grammarAccess.getIfteAccess().getAlternatives_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Ifte__Group_3_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifte__Group_3_1_1__0__Impl
	rule__Ifte__Group_3_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Group_3_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getLeftCurlyBracketKeyword_3_1_1_0()); }

	'{' 

{ after(grammarAccess.getIfteAccess().getLeftCurlyBracketKeyword_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifte__Group_3_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifte__Group_3_1_1__1__Impl
	rule__Ifte__Group_3_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Group_3_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getEstmtsAssignment_3_1_1_1()); }
(rule__Ifte__EstmtsAssignment_3_1_1_1)
{ after(grammarAccess.getIfteAccess().getEstmtsAssignment_3_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ifte__Group_3_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ifte__Group_3_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__Group_3_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getRightCurlyBracketKeyword_3_1_1_2()); }

	'}' 

{ after(grammarAccess.getIfteAccess().getRightCurlyBracketKeyword_3_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Code__DeclsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getDeclsAlternatives_0_0()); }
(rule__Code__DeclsAlternatives_0_0)
{ after(grammarAccess.getCodeAccess().getDeclsAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Code__StmtsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodeAccess().getStmtsStatementParserRuleCall_1_0()); }
	ruleStatement{ after(grammarAccess.getCodeAccess().getStmtsStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStatement__TdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStatementAccess().getTdTypeDeclParserRuleCall_0_0()); }
	ruleTypeDecl{ after(grammarAccess.getSingleStatementAccess().getTdTypeDeclParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStatement__VdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStatementAccess().getVdVarDeclParserRuleCall_1_0()); }
	ruleVarDecl{ after(grammarAccess.getSingleStatementAccess().getVdVarDeclParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStatement__VinAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStatementAccess().getVinVarInstParserRuleCall_2_0()); }
	ruleVarInst{ after(grammarAccess.getSingleStatementAccess().getVinVarInstParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStatement__IfstAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStatementAccess().getIfstIfteParserRuleCall_3_0()); }
	ruleifte{ after(grammarAccess.getSingleStatementAccess().getIfstIfteParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStatement__FlAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStatementAccess().getFlForlpParserRuleCall_4_0()); }
	ruleforlp{ after(grammarAccess.getSingleStatementAccess().getFlForlpParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__VinAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getVinVarInstParserRuleCall_0_0()); }
	ruleVarInst{ after(grammarAccess.getStatementAccess().getVinVarInstParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__IfstAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getIfstIfteParserRuleCall_1_0()); }
	ruleifte{ after(grammarAccess.getStatementAccess().getIfstIfteParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__FlAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getFlForlpParserRuleCall_2_0()); }
	ruleforlp{ after(grammarAccess.getStatementAccess().getFlForlpParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__PtAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getPtPTypeParserRuleCall_2_1_0_0()); }
	rulePType{ after(grammarAccess.getVarDeclAccess().getPtPTypeParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__TdAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getTdTypeDeclCrossReference_2_1_1_0()); }
(
{ before(grammarAccess.getVarDeclAccess().getTdTypeDeclIDTerminalRuleCall_2_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getVarDeclAccess().getTdTypeDeclIDTerminalRuleCall_2_1_1_0_1()); }
)
{ after(grammarAccess.getVarDeclAccess().getTdTypeDeclCrossReference_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PType__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPTypeAccess().getTypeIntTypeTerminalRuleCall_0_0()); }
	RULE_INTTYPE{ after(grammarAccess.getPTypeAccess().getTypeIntTypeTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PType__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPTypeAccess().getTypeStrTypeTerminalRuleCall_1_0()); }
	RULE_STRTYPE{ after(grammarAccess.getPTypeAccess().getTypeStrTypeTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTypeDeclAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__TpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTpPTypeParserRuleCall_3_0()); }
	rulePType{ after(grammarAccess.getTypeDeclAccess().getTpPTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarInst__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarInstAccess().getNameVarDeclCrossReference_0_0()); }
(
{ before(grammarAccess.getVarInstAccess().getNameVarDeclIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getVarInstAccess().getNameVarDeclIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getVarInstAccess().getNameVarDeclCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarInst__ExpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarInstAccess().getExpExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getVarInstAccess().getExpExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Concat__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatAccess().getRightStringLiteralParserRuleCall_1_2_0()); }
	ruleStringLiteral{ after(grammarAccess.getConcatAccess().getRightStringLiteralParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subtraction__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtractionAccess().getRightAdditionParserRuleCall_1_2_0()); }
	ruleAddition{ after(grammarAccess.getSubtractionAccess().getRightAdditionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightDivisionParserRuleCall_1_2_0()); }
	ruleDivision{ after(grammarAccess.getMultiplicationAccess().getRightDivisionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Division__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivisionAccess().getRightPowerOfParserRuleCall_1_2_0()); }
	rulePowerOf{ after(grammarAccess.getDivisionAccess().getRightPowerOfParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PowerOf__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPowerOfAccess().getRightBasicExpParserRuleCall_1_2_0()); }
	ruleBasicExp{ after(grammarAccess.getPowerOfAccess().getRightBasicExpParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarExps__VrnmAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarExpsAccess().getVrnmVarDeclCrossReference_0()); }
(
{ before(grammarAccess.getVarExpsAccess().getVrnmVarDeclIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getVarExpsAccess().getVrnmVarDeclIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVarExpsAccess().getVrnmVarDeclCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Forlp__CondAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForlpAccess().getCondExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getForlpAccess().getCondExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Forlp__StmtsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForlpAccess().getStmtsSingleStatementParserRuleCall_2_0_0()); }
	ruleSingleStatement{ after(grammarAccess.getForlpAccess().getStmtsSingleStatementParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Forlp__StmtsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForlpAccess().getStmtsCodeParserRuleCall_2_1_1_0()); }
	ruleCode{ after(grammarAccess.getForlpAccess().getStmtsCodeParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__CondAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getCondExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getIfteAccess().getCondExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__StmtsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getStmtsSingleStatementParserRuleCall_2_0_0()); }
	ruleSingleStatement{ after(grammarAccess.getIfteAccess().getStmtsSingleStatementParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__StmtsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getStmtsCodeParserRuleCall_2_1_1_0()); }
	ruleCode{ after(grammarAccess.getIfteAccess().getStmtsCodeParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__EstmtsAssignment_3_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getEstmtsSingleStatementParserRuleCall_3_1_0_0()); }
	ruleSingleStatement{ after(grammarAccess.getIfteAccess().getEstmtsSingleStatementParserRuleCall_3_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ifte__EstmtsAssignment_3_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfteAccess().getEstmtsCodeParserRuleCall_3_1_1_1_0()); }
	ruleCode{ after(grammarAccess.getIfteAccess().getEstmtsCodeParserRuleCall_3_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_INTTYPE : 'int';

RULE_STRTYPE : 'string';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


